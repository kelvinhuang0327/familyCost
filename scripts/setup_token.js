#!/usr/bin/env node

const readline = require('readline');
const GitHubTokenManager = require('../app/backend/github_token_manager');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

async function setupToken() {
    console.log('üîß GitHub Token Ë®≠ÁΩÆÂ∑•ÂÖ∑');
    console.log('==============================');
    console.log('');
    console.log('üìã Ë´ãÊåâÁÖß‰ª•‰∏ãÊ≠•È©üÁç≤Âèñ GitHub TokenÔºö');
    console.log('1. ÂâçÂæÄÔºöhttps://github.com/settings/tokens/new');
    console.log('2. ÈÅ∏ÊìáÊ¨äÈôêÔºörepo (ÂÆåÊï¥ÂÄâÂ∫´Ë®™ÂïèÊ¨äÈôê)');
    console.log('3. Ë§áË£ΩÁîüÊàêÁöÑ TokenÔºà‰ª• ghp_ ÈñãÈ†≠Ôºâ');
    console.log('');
    
    rl.question('Ë´ãËº∏ÂÖ•‰Ω†ÁöÑ GitHub Token: ', async (token) => {
        try {
            if (!token || !token.trim()) {
                console.log('‚ùå Token ‰∏çËÉΩÁÇ∫Á©∫');
                rl.close();
                return;
            }
            
            const cleanToken = token.trim();
            
            // È©óË≠â Token Ê†ºÂºè
            if (!cleanToken.startsWith('ghp_') || cleanToken.length < 40) {
                console.log('‚ùå Token Ê†ºÂºè‰∏çÊ≠£Á¢∫ÔºåGitHub Personal Access Token Êáâ‰ª• ghp_ ÈñãÈ†≠');
                rl.close();
                return;
            }
            
            console.log('üîç Ê≠£Âú®Ë®≠ÁΩÆ Token...');
            
            const tokenManager = new GitHubTokenManager();
            await tokenManager.saveToken(cleanToken);
            
            console.log('‚úÖ Token Ë®≠ÁΩÆÊàêÂäüÔºÅ');
            console.log('');
            console.log('üß™ Ê∏¨Ë©¶ Token...');
            
            // Ê∏¨Ë©¶ Token
            const loadedToken = await tokenManager.loadToken();
            if (loadedToken) {
                console.log('‚úÖ Token Ê∏¨Ë©¶ÊàêÂäüÔºÅ');
                console.log(`üîë Token ÂâçÂπæ‰Ωç: ${loadedToken.substring(0, 10)}...`);
                console.log('');
                console.log('üéâ Ë®≠ÁΩÆÂÆåÊàêÔºÅÁèæÂú®‰Ω†ÂèØ‰ª•‰ΩøÁî®ÂêåÊ≠•ÂäüËÉΩ‰∫Ü„ÄÇ');
            } else {
                console.log('‚ùå Token Ê∏¨Ë©¶Â§±Êïó');
            }
            
        } catch (error) {
            console.error('‚ùå Ë®≠ÁΩÆÂ§±Êïó:', error.message);
        }
        
        rl.close();
    });
}

setupToken();
