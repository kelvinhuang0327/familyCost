#!/usr/bin/env node

const readline = require('readline');
const GitHubDataManager = require('../app/backend/github_data_manager');
const GitHubTokenManager = require('../app/backend/github_token_manager');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

async function setTokenAndTest() {
    console.log('üîß GitHub Token Ë®≠ÁΩÆÂíåÊ∏¨Ë©¶Â∑•ÂÖ∑');
    console.log('==============================');
    console.log('');
    console.log('üìã Ë´ãÊåâÁÖß‰ª•‰∏ãÊ≠•È©üÁç≤Âèñ GitHub TokenÔºö');
    console.log('1. ÂâçÂæÄÔºöhttps://github.com/settings/tokens/new');
    console.log('2. ÈÅ∏ÊìáÊ¨äÈôêÔºörepo (ÂÆåÊï¥ÂÄâÂ∫´Ë®™ÂïèÊ¨äÈôê)');
    console.log('3. Ë§áË£ΩÁîüÊàêÁöÑ TokenÔºà‰ª• ghp_ ÈñãÈ†≠Ôºâ');
    console.log('');
    
    rl.question('Ë´ãËº∏ÂÖ•‰Ω†ÁöÑ GitHub Token: ', async (token) => {
        try {
            if (!token || !token.trim()) {
                console.log('‚ùå Token ‰∏çËÉΩÁÇ∫Á©∫');
                rl.close();
                return;
            }
            
            const cleanToken = token.trim();
            
            // È©óË≠â Token Ê†ºÂºè
            if (!cleanToken.startsWith('ghp_') || cleanToken.length < 40) {
                console.log('‚ùå Token Ê†ºÂºè‰∏çÊ≠£Á¢∫ÔºåGitHub Personal Access Token Êáâ‰ª• ghp_ ÈñãÈ†≠');
                rl.close();
                return;
            }
            
            console.log('üîç Ê≠£Âú®Ê∏¨Ë©¶ Token...');
            
            // Ë®≠ÁΩÆÁí∞Â¢ÉËÆäÊï∏
            process.env.GITHUB_TOKEN = cleanToken;
            
            // Ê∏¨Ë©¶ Token
            const githubDataManager = new GitHubDataManager();
            const testToken = await githubDataManager.getValidToken();
            
            if (testToken) {
                console.log('‚úÖ Token Ë®≠ÁΩÆÊàêÂäüÔºÅ');
                console.log(`üîë Token ÂâçÂπæ‰Ωç: ${testToken.substring(0, 10)}...`);
                
                // Ê∏¨Ë©¶ GitHub API ÈÄ£Êé•
                console.log('üåê Ê∏¨Ë©¶ GitHub API ÈÄ£Êé•...');
                try {
                    const data = await githubDataManager.getDataFromGitHub();
                    console.log('‚úÖ GitHub API ÈÄ£Êé•ÊàêÂäü');
                    console.log(`üìä Áï∂Ââç GitHub Ë≥áÊñôÁ≠ÜÊï∏: ${data.length}`);
                    
                    // Ê∏¨Ë©¶‰øùÂ≠òÊï∏Êìö
                    console.log('üíæ Ê∏¨Ë©¶‰øùÂ≠òÊï∏ÊìöÂà∞ GitHub...');
                    const result = await githubDataManager.saveDataToGitHub(data);
                    console.log('‚úÖ Êï∏Êìö‰øùÂ≠òÊ∏¨Ë©¶ÊàêÂäü');
                    console.log('üìù Êèê‰∫§‰ø°ÊÅØ:', result.commit.message);
                    
                    console.log('');
                    console.log('üéâ ÊâÄÊúâÊ∏¨Ë©¶ÈÄöÈÅéÔºÅToken Ë®≠ÁΩÆÊàêÂäüÔºÅ');
                    console.log('');
                    console.log('üìã Êé•‰∏ã‰æÜÁöÑÊ≠•È©üÔºö');
                    console.log('1. Âú® Render ÊéßÂà∂Âè∞Ë®≠ÁΩÆÁí∞Â¢ÉËÆäÊï∏ GITHUB_TOKEN');
                    console.log('2. ÊàñËÄÖÈÅãË°å: export GITHUB_TOKEN="' + cleanToken + '"');
                    console.log('3. ÁÑ∂ÂæåÂ∞±ÂèØ‰ª•‰ΩøÁî®ÂêåÊ≠•ÂäüËÉΩ‰∫Ü');
                    
                } catch (error) {
                    console.log('‚ùå GitHub API Ê∏¨Ë©¶Â§±Êïó:', error.message);
                }
                
            } else {
                console.log('‚ùå Token Ë®≠ÁΩÆÂ§±Êïó');
            }
            
        } catch (error) {
            console.error('‚ùå Ë®≠ÁΩÆÂ§±Êïó:', error.message);
        }
        
        rl.close();
    });
}

setTokenAndTest();
